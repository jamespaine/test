#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****



OldCubeLogChanges = CUBEGETLOGCHANGES('ACTUALS - Balance Sheet');
CUBESETLOGCHANGES('ACTUALS - Balance Sheet', 0);

sProcessName = GetProcessName();
#sLogFile = 'D:\TM1DataFiles\Error Logs\' | sProcessName | '-Prolog.log';

nmetaRecs = 0;
nDataRecs = 0;

#ASCIIOutput (sLogFile, 'Processing ' | pDatabase | ' for ' | pYears);

vDBYear = CellGetS('zDatabase Year',pYears,pDatabase,'BS Year');


vCCsuffix = '_' | pDatabase;

vCompany = pDatabase;

vVersion='Actual';
vCurrency='LC';


#### clear down existing data ###

#sMDX = '{TM1FILTERBYPATTERN( {TM1FILTERBYLEVEL( {TM1SUBSETALL( [Company] )}, 0)}, "*_' | pDatabase |'")}';

cbOutput = 'ACTUALS - Balance Sheet';

vwView = 'zClearBS';

if (ViewExists(cbOutput,vwView) = 1);
ViewDestroy(cbOutput,vwView);
endif;

ViewCreate(cbOutput,vwView);

ViewExtractSkipCalcsSet (cbOutput,vwView, 1);

ViewExtractSkipRuleValuesSet (cbOutput,vwView, 1);

ViewExtractSkipZeroesSet (cbOutput,vwView, 1);

## Company ###

DimName = 'Company';

if(SubsetExists(DimName,vwView) = 1);
SubsetDestroy(DimName,vwView);
endif;

#SubsetCreateByMDX(vwView,sMDX);

SubsetCreate('Company',vwView);
SubsetElementInsert('Company',vwView,pDatabase,1);

### t_Year###

if(SubsetExists('t_Year',vwView) = 1);
SubsetDestroy('t_Year',vwView);
endif;

SubsetCreate('t_Year',vwView);
SubsetElementInsert('t_Year',vwView,pYears,1);


### t_Month ###

# Get Year name
sYr = DimensionElementPrincipalName('t_Year', pYears);

# Basically need YTD
sYTD = 'P' | pMonth | Subst(sYr, 3,2);

if(SubsetExists('t_Month',vwView) = 1);
SubsetDestroy('t_Month',vwView);
endif;

SubsetCreate('t_Month',vwView);
SubsetMDXSet('t_Month', vwView, 'Tm1filterbylevel(Tm1drilldownmember({[t_month].[' | sYTD | ']},all,recursive),0)');
SubsetMDXSet ('t_Month', vwView, '');

### Version ###

if(SubsetExists('Version',vwView) = 1);
SubsetDestroy('Version',vwView);
endif;

SubsetCreate('Version',vwView);
SubsetElementInsert('Version',vwView,'Actual',1);


### FX code ###

if(SubsetExists('FX code',vwView) = 1);
SubsetDestroy('FX code',vwView);
endif;

SubsetCreate('FX code',vwView);
SubsetElementInsert('FX code',vwView,'LC',1);



ViewSubsetAssign(cbOutput,vwView, 'Company', vwView);

ViewSubsetAssign(cbOutput,vwView, 't_Month', vwView);

ViewSubsetAssign(cbOutput,vwView, 'Version', vwView);

ViewSubsetAssign(cbOutput,vwView, 'FX code', vwView);

ViewZeroOut(cbOutput, vwView);



#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****

#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****



if (nDataRecs = 0);
	sLogFile = 'D:\TM1DataFiles\Error Logs\DataLoadBSActualError_' | pYears | ' for ' | pDatabase | '.csv';
                nLogFileCreated = 0;


endif;
nDataRecs = nDataRecs + 1;


vYear = pYears;
sYr = DimensionElementPrincipalName('t_Year', pYears);
sMonth = 'P' | vMonth | '-' | sYr;


net = abs(net);

# only nominals beginning with 2 should be negative
if( subst(Nominal_account,1,1) @= '2');

net = -net;

endif;

nAmount = Net;



if(DIMIX('Company',vCompany) = 0);

nOldValue = 0;

		sTab = '","';
		sLine = 'Processing ' | pDatabase | ' for  Database' | pYears;
		sLine = sLine | sTab | 'Skipping ACTUALS - Balance Sheet (' | vCompany | ',' | Nominal_Account | ',' | sMonth | ',' | vCurrency | ',' | vVersion | ')';
		sLine = sLine | sTab | NumberToString(nOldValue);
                                sLine = sLine | sTab | NumberToString(Net);
		sLine = sLine | sTab | NumberToString(nOldValue + Net);


                    if(nLogFileCreated = 0);
                     nLogFileCreated = 1;
                   ASCIIOutput(sLogFile,'","Action","Old Value","Input Value","New Value');
                   endif;

		ASCIIOutput (sLogFile, sLine);


	itemskip;

else;

nOldValue = CellGetN('ACTUALS - Balance Sheet',vCompany,Nominal_Account,sMonth,vCurrency,vVersion);

	if (pDebug > 0);
		sTab = '","';
		sLine = 'Processing ' | pDatabase | ' for  Database' | pYears;
		sLine = sLine | sTab | 'Writing to ACTUALS - Balance Sheet (' | vCompany | ',' | Nominal_Account | ',' | sMonth | ',' |  vCurrency | ',' | vVersion | ')';
		sLine = sLine | sTab | NumberToString(nOldValue);
                                sLine = sLine | sTab | NumberToString(Net);
		sLine = sLine | sTab | NumberToString(nOldValue + Net);


                    if(nLogFileCreated = 0);
                     nLogFileCreated = 1;
                   ASCIIOutput(sLogFile,'","Action","Old Value","Input Value","New Value');
                   endif;

		ASCIIOutput (sLogFile, sLine);
	endif;


	CellPutN(nOldValue+nAmount,'ACTUALS - Balance Sheet',vCompany,Nominal_Account,sMonth,vCurrency,vVersion);

endif;
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****


CUBESETLOGCHANGES('ACTUALS - Balance Sheet', OldCubeLogChanges);
#endregion